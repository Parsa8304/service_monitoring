version: "3.9"

services:

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks: [stack]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks: [stack]


  monitoring:
    build: ./Monitoring
    working_dir: /app
    volumes:
      - ./Monitoring:/app
      - prom_multiproc:/var/run/prometheus   
    environment:

      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1

      PROMETHEUS_URL: http://prometheus:9090
      PROMETHEUS_MULTIPROC_DIR: /var/run/prometheus  
      DJANGO_SETTINGS_MODULE: monitoring_api.settings
      DJANGO_DEBUG: "1"
    command: >
      bash -lc "
      rm -rf /var/run/prometheus/* || true &&
      python manage.py migrate --noinput &&
      gunicorn monitoring_api.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 60
      "
    depends_on:
      - redis
      - prometheus
    ports:
      - "9100:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/api/"]   
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      stack:
        aliases:
          - monitoring

  celery-worker:
    build: ./Monitoring
    container_name: monitoring_worker
    working_dir: /app
    volumes:
      - ./Monitoring:/app
      - prom_multiproc:/var/run/prometheus  
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      DJANGO_SETTINGS_MODULE: monitoring_api.settings
      PROMETHEUS_MULTIPROC_DIR: /var/run/prometheus  
    command: >
      bash -lc "
      celery -A monitoring_api worker -l info
      "
    depends_on:
      - monitoring
      - redis
    restart: unless-stopped
    networks: [stack]

  celery-beat:
    build: ./Monitoring
    container_name: monitoring_beat
    working_dir: /app
    volumes:
      - ./Monitoring:/app
      - prom_multiproc:/var/run/prometheus   
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      DJANGO_SETTINGS_MODULE: monitoring_api.settings
      PROMETHEUS_MULTIPROC_DIR: /var/run/prometheus  
    command: >
      bash -lc "celery -A monitoring_api beat -l info"
      
    depends_on:
      - monitoring
      - redis
    restart: unless-stopped
    networks: [stack]

  khabarfarsi:
    build: ./KhabarFarsi_API
    container_name: khabarfarsi
    working_dir: /app
    volumes:
      - ./KhabarFarsi_API:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - SERVICE_NAME=khabarfarsi
      - SERVICE_BASE_URL=http://khabarfarsi:8000
      - MONITOR_URL=http://monitoring:8000/api/register/
      - MONITOR_REGISTRATION_TOKEN=qwertyuiopasdfghjklzxcvbnm123456
      - ENVIRONMENT=dev
      - WATCHFILES_FORCE_POLLING=1
      - CHOKIDAR_USEPOLLING=1
    ports:
      - "9001:8000"
    depends_on: [monitoring]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: [stack]

  producthunt:
    build: ./ProductHunt_API
    container_name: producthunt
    working_dir: /app
    volumes:
      - ./ProductHunt_API:/app
    environment:
      - SERVICE_NAME=producthunt
      - SERVICE_BASE_URL=http://producthunt:8000
      - MONITOR_URL=http://monitoring:8000/api/register/
      - MONITOR_REGISTRATION_TOKEN=qwertyuiopasdfghjklzxcvbnm123456
      - ENVIRONMENT=dev
      - WATCHFILES_FORCE_POLLING=1
      - CHOKIDAR_USEPOLLING=1
    ports:
      - "9002:8000"
    depends_on: [monitoring]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: [stack]

  twitter:
    build: ./Twitter_API
    container_name: twitter
    working_dir: /app
    volumes:
      - ./Twitter_API:/app
    environment:
      - SERVICE_NAME=twitter
      - SERVICE_BASE_URL=http://twitter:8000
      - MONITOR_URL=http://monitoring:8000/api/register/
      - MONITOR_REGISTRATION_TOKEN=qwertyuiopasdfghjklzxcvbnm123456
      - ENVIRONMENT=dev
      - WATCHFILES_FORCE_POLLING=1
      - CHOKIDAR_USEPOLLING=1
    ports:
      - "9003:8000"
    depends_on: [monitoring]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: [stack]

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks: [stack]
    restart: unless-stopped

networks:
  stack:
    driver: bridge

volumes:
  prom_multiproc:
